%skeleton "lalr1.cc"          // -*- c++ -*-
%require "3.3"

// Parser options

%defines
%define api.namespace { rbs_parser }
%define api.parser.class { Parser }
%define api.value.type { union ParserValue }
%define parse.error verbose

%locations
%parse-param { Driver& driver } { Lexer& lexer }

%code requires {
  #include "ast.hh"
  #include <exception>
  #include <sstream>

  namespace rbs_parser {
    class Driver;
    class Lexer;

    class ParseError: public std::logic_error {
    public:
        ParseError(const std::string &message) : logic_error(message) {}
        ParseError(const char *message) : logic_error(message) {}
    };
  }

  union ParserValue {
    rbs_parser::NodeList *list;
    rbs_parser::Node *node;
    std::string* string;
  };

}

%code {
  #include "Lexer.hh"
  #include "Driver.hh"
  #define yylex lexer.lex
}

%token tEOF 0
%token tERROR 1

// Tokens
%token tGLOBALIDENT
%token tINTEGER
%token tINTERFACEIDENT
%token tIVAR
%token tLIDENT
%token tLKEYWORD
%token tNAMESPACE
%token tQUOTEDIDENT
%token tQUOTEDMETHOD
%token tSTRING
%token tSYMBOL
%token tUIDENT
%token tUKEYWORD
%token tEXCLMETHOD

%token <string>
   // Keywords
   kALIAS
   kANY
   kATTRACCESSOR
   kATTRREADER
   kATTRWRITER
   kBOOL
   kBOT
   kCLASS
   kDEF
   kEND
   kEXTEND
   kEXTENSION
   kFALSE
   kIN
   kINCLUDE
   kINCOMPATIBLE
   kINSTANCE
   kINTERFACE
   kMODULE
   kNIL
   kOUT
   kPREPEND
   kPRIVATE
   kPUBLIC
   kSELF
   kSELFQ
   kSINGLETON
   kSUPER
   kTOP
   kTRUE
   kTYPE
   kUNCHECKED
   kUNTYPED
   kVOID

  // Punctuation
  kAMP
  kARROW
  kBAR
  kCOLON
  kCOLON2
  kCOMMA
  kDOT
  kEQ
  kEXCLAMATION
  kFATARROW
  kHAT
  kLBRACE
  kLBRACKET
  kLPAREN
  kLT
  kOPERATOR
  kQUESTION
  kRBRACE
  kRBRACKET
  kRPAREN
  kSTAR
  kSTAR2

%type <string>
  tEXCLMETHOD
  tGLOBALIDENT
  tINTEGER
  tINTERFACEIDENT
  tIVAR
  tLIDENT
  tLKEYWORD
  tNAMESPACE
  tQUOTEDIDENT
  tQUOTEDMETHOD
  tSTRING
  tSYMBOL
  tUIDENT
  tUKEYWORD

  attr_var_opt
  attributes
  class_name
  def_name
  extension_name
  identifier_keywords
  interface_name
  keyword
  keyword_name
  method_kind
  method_name
  method_name0
  namespace
  qualified_name
  simple_name
  super_class
  type_param_check
  type_param_variance
  var_name_opt

%type <node>
  alias_member
  attribute_member
  block_opt
  block_type
  class_member
  extend_member
  include_member
  method_member
  method_type
  module_self_type
  module_type_param
  optional_keyword
  optional_positional
  prepend_member
  proc_type
  record_field
  record_type
  required_keyword
  required_positional
  rest_keyword
  rest_positional
  simple_type
  type

%type <list>
  class_members
  keywords
  method_types
  module_type_params
  module_type_params0
  optional_positionals
  params
  params_opt
  record_fields
  rest_positionals
  type_list
  type_params
  type_params0

 // Precedence
%nonassoc kQUESTION
%left kAMP
%left kBAR
%nonassoc kARROW

%expect 3

// Productions
%%

  target
    : signatures tEOF

  signatures
    : %empty
    | signatures signature

  signature
    : type_decl
    | const_decl
    | extension_decl
    | global_decl
    | interface_decl
    | module_decl
    | class_decl

  // Types

  type_decl
    : kTYPE qualified_name kEQ type
    { driver.file->decls.push_back(new TypeDecl(driver.loc(@1, @4), $2, static_cast<Type*>($4))); }

  // Consts

  const_decl
    : class_name kCOLON type
    { driver.file->decls.push_back(new Const(driver.loc(@1, @3), $1, static_cast<Type*>($3))); }
    | namespace tUKEYWORD type
    {
      $2->pop_back();
      driver.file->decls.push_back(
        new Const(
          driver.loc(@1, @3),
          new std::string(*$1 + *$2),
          static_cast<Type*>($3)));
    }

  // Globals

  global_decl
    : tGLOBALIDENT kCOLON type
    { driver.file->decls.push_back(new Global(driver.loc(@1, @3), $1, static_cast<Type*>($3))); }

  // Extensions

  extension_decl
    : kEXTENSION class_name module_type_params kLPAREN extension_name kRPAREN class_members kEND
    // TODO should be type params?
    {
      Extension* decl = new Extension(driver.loc(@1, @8), $2, $5);
      for (auto &node : $3->nodes) {
        decl->typeParams.emplace_back(static_cast<TypeParam*>(node));
      }
      for (auto &node : $7->nodes) {
        decl->members.emplace_back(static_cast<Member*>(node));
      }
      driver.file->decls.push_back(decl);
    }

  extension_name
    : tUIDENT
    | tLIDENT

  // Modules

  module_decl
    : kMODULE class_name module_type_params module_self_type class_members kEND
    {
      Module* decl = new Module(driver.loc(@1, @6), $2);
      for (auto &node : $3->nodes) {
        decl->typeParams.emplace_back(static_cast<TypeParam*>(node));
      }
      if ($4 != NULL) {
        decl->selfType = static_cast<Type*>($4);
      }
      for (auto &node : $5->nodes) {
        decl->members.emplace_back(static_cast<Member*>(node));
      }
      driver.file->decls.push_back(decl);
    }
    | kMODULE namespace tUKEYWORD type class_members kEND
    {
      $3->pop_back();
      Module* decl = new Module(driver.loc(@1, @6), new std::string(*$2 + *$3));
      decl->selfType = static_cast<Type*>($4);
      for (auto &node : $5->nodes) {
        decl->members.emplace_back(static_cast<Member*>(node));
      }
      driver.file->decls.push_back(decl);
    }

  module_self_type
    : %empty
    { $$ = NULL; }
    | kCOLON type
    { $$ = $2; }

  // Interfaces

  interface_decl
    : kINTERFACE interface_name module_type_params class_members kEND
    {
      Interface* decl = new Interface(driver.loc(@1, @5), $2);
      for (auto &node : $3->nodes) {
        decl->typeParams.emplace_back(static_cast<TypeParam*>(node));
      }
      for (auto &node : $4->nodes) {
        decl->members.emplace_back(static_cast<Member*>(node));
      }
      driver.file->decls.push_back(decl);
    }

  interface_name
    : namespace tINTERFACEIDENT
    { $$ = new std::string(*$1 + *$2); }

  // Classes

  class_decl
    : kCLASS class_name module_type_params super_class class_members kEND
    {
      Class* decl = new Class(driver.loc(@1, @6), $2, $4);
      for (auto &node : $3->nodes) {
        decl->typeParams.emplace_back(static_cast<TypeParam*>(node));
      }
      for (auto &node : $5->nodes) {
        decl->members.emplace_back(static_cast<Member*>(node));
      }
      driver.file->decls.push_back(decl);
    }

  super_class
    : %empty
    { $$ = NULL; }
    | kLT class_name
    { $$ = $2; }
    | kLT class_name kLBRACKET type_list kRBRACKET
    { $$ = $2; }

  class_name
    : namespace tUIDENT
    { $$ = new std::string(*$1 + *$2); }

  // Generics

  module_type_params
    : %empty
    { $$ = driver.list(); }
    | kLBRACKET module_type_params0 kRBRACKET
    { $$ = $2; }

  module_type_params0
    : module_type_param
    { $$ = driver.list($1); }
    | module_type_params0 kCOMMA module_type_param
    { $$ = driver.merge($1, $3); }

  module_type_param
    : type_param_check type_param_variance tUIDENT
    { $$ = new TypeParam(driver.loc(@1, @3), $3, $2, $1 != NULL); }

  type_param_variance
    : %empty
    { $$ = NULL; }
    | kOUT
    | kIN

  type_param_check
    : %empty
    { $$ = NULL; }
    | kUNCHECKED

  // Class members

  class_members
    : %empty
    { $$ = driver.list(); }
    | class_members class_member
    { $$ = driver.merge($1, $2); }

  class_member
    : alias_member
    | attribute_member
    | include_member
    | extend_member
    | prepend_member
    | kPUBLIC
    { $$ = new Visibility(driver.loc(@1, @1), $1); }
    | kPRIVATE
    { $$ = new Visibility(driver.loc(@1, @1), $1); }
    | method_member

  alias_member
    : kALIAS method_name method_name
    { $$ = new Alias(driver.loc(@1, @3), $2, $3, false); }
    | kALIAS kSELF kDOT method_name kSELF kDOT method_name
    { $$ = new Alias(driver.loc(@1, @7), $4, $7, true); }

  attribute_member
    : kATTRREADER keyword type
    { $$ = new AttrReader(driver.loc(@1, @3), $2, NULL, static_cast<Type*>($3)); }
    | kATTRREADER method_name attr_var_opt kCOLON type
    { $$ = new AttrReader(driver.loc(@1, @5), $2, $3, static_cast<Type*>($5)); }
    | kATTRWRITER keyword type
    { $$ = new AttrWriter(driver.loc(@1, @3), $2, NULL, static_cast<Type*>($3)); }
    | kATTRWRITER method_name attr_var_opt kCOLON type
    { $$ = new AttrWriter(driver.loc(@1, @5), $2, $3, static_cast<Type*>($5)); }
    | kATTRACCESSOR keyword type
    { $$ = new AttrAccessor(driver.loc(@1, @3), $2, NULL, static_cast<Type*>($3)); }
    | kATTRACCESSOR method_name attr_var_opt kCOLON type
    { $$ = new AttrAccessor(driver.loc(@1, @5), $2, $3, static_cast<Type*>($5)); }

  attr_var_opt
    : kLPAREN kRPAREN
    { $$ = new std::string(""); }
    | kLPAREN tIVAR kRPAREN
    { $$ = $2; }

  include_member
    : kINCLUDE qualified_name
    { $$ = new Include(driver.loc(@1, @2), new TypeSimple(driver.loc(@2, @2), $2)); }
    | kINCLUDE qualified_name kLBRACKET type_list kRBRACKET
    {
      TypeGeneric* type = new TypeGeneric(driver.loc(@2, @5), $2);
      for (auto &ptype : $4->nodes) {
        type->types.emplace_back(static_cast<Type*>(ptype));
      }
      $$ = new Include(driver.loc(@1, @5), type);
    }

  extend_member
    : kEXTEND qualified_name
    { $$ = new Extend(driver.loc(@1, @2), new TypeSimple(driver.loc(@2, @2), $2)); }
    | kEXTEND qualified_name kLBRACKET type_list kRBRACKET
    {
      TypeGeneric* type = new TypeGeneric(driver.loc(@2, @5), $2);
      for (auto &ptype : $4->nodes) {
        type->types.emplace_back(static_cast<Type*>(ptype));
      }
      $$ = new Extend(driver.loc(@1, @5), type);
    }

  prepend_member
    : kPREPEND qualified_name
    { $$ = new Prepend(driver.loc(@1, @2), new TypeSimple(driver.loc(@2, @2), $2)); }
    | kPREPEND qualified_name kLBRACKET type_list kRBRACKET
    {
      TypeGeneric* type = new TypeGeneric(driver.loc(@2, @5), $2);
      for (auto &ptype : $4->nodes) {
        type->types.emplace_back(static_cast<Type*>(ptype));
      }
      $$ = new Prepend(driver.loc(@1, @5), type);
    }

  // Methods

  method_member
    : attributes kDEF method_kind def_name method_types
    {
      auto instance = $3 == NULL || $3->compare("self?") == 0;
      auto singleton = $3 != NULL;
      auto incompatible = $1 != NULL;
      Method* decl = new Method(driver.loc(@2, @5), $4, instance, singleton, incompatible);
      for (auto &node : $5->nodes) {
        decl->types.emplace_back(static_cast<MethodType*>(node));
      }
      $$ = decl;
    }

  attributes
    : %empty
    { $$ = NULL; }
    | kINCOMPATIBLE

  def_name
    : keyword
    | method_name kCOLON

  method_kind
    : %empty
    { $$ = NULL; }
    | kSELF kDOT
    { $$ = $1; }
    | kSELFQ kDOT
    { $$ = $1; }

  method_name
    : kOPERATOR
    | kAMP | kHAT | kSTAR | kLT | kEXCLAMATION | kSTAR2 | kBAR | kOUT | kIN
    | method_name0
    | method_name0 kQUESTION
    { $$ = new std::string(*$1 + "?"); }
    | method_name0 kEQ
    { $$ = new std::string(*$1 + "="); }
    | tQUOTEDMETHOD
    | tQUOTEDIDENT
    | tEXCLMETHOD

  method_name0
    : tUIDENT
    | tLIDENT
    | identifier_keywords

  identifier_keywords
    : kCLASS | kVOID | kNIL | kANY | kUNTYPED | kTOP | kBOT | kINSTANCE | kBOOL | kSINGLETON
    | kTYPE | kMODULE | kPRIVATE | kPUBLIC | kEND | kINCLUDE | kEXTEND | kPREPEND
    | kATTRREADER | kATTRACCESSOR | kATTRWRITER | kDEF | kEXTENSION | kINCOMPATIBLE
    | kUNCHECKED

  method_types
    : %empty
    { $$ = driver.list(); }
    | method_types kBAR method_type
    { $$ = driver.merge($1, $3); }
    | method_type
    { $$ = driver.list($1); }

  method_type
    : type_params params_opt block_opt kARROW type
    {
      TypeProc* sig = new TypeProc(driver.loc(@1, @5));
      for (auto &node : $2->nodes) {
        sig->params.emplace_back(static_cast<Param*>(node));
      }
      sig->ret = static_cast<Type*>($5);

      MethodType* type = new MethodType(driver.loc(@1, @5), sig);
      for (auto &node : $1->nodes) {
        type->typeParams.emplace_back(static_cast<TypeParam*>(node));
      }
      if ($3) {
        type->block = static_cast<Block*>($3);
      }
      $$ = type;
    }

  type_params
    : %empty
    { $$ = driver.list(); }
    | kLBRACKET type_params0 kRBRACKET
    { $$ = $2; }

  type_params0
    : tUIDENT
    { $$ = driver.list(new TypeParam(driver.loc(@1, @1), $1, NULL, false)); }
    | type_params0 kCOMMA tUIDENT
    { $$ = driver.merge($1, new TypeParam(driver.loc(@3, @3), $3, NULL, false)); }

  params_opt
    : %empty
    { $$ = driver.list(); }
    | kLPAREN kRPAREN
    { $$ = driver.list(); }
    | kLPAREN kCOMMA kRPAREN
    { $$ = driver.list(); }
    | kLPAREN params kRPAREN
    { $$ = $2; }

  block_opt
    : %empty
    { $$ = NULL; }
    | kLBRACE block_type kRBRACE
    { $$ = new Block(driver.loc(@1, @3), static_cast<TypeProc*>($2), false); }
    | kQUESTION kLBRACE block_type kRBRACE
    { $$ = new Block(driver.loc(@1, @3), static_cast<TypeProc*>($3), true); }

  block_type
    : kLPAREN kRPAREN kARROW type
    { $$ = new TypeProc(driver.loc(@1, @4), static_cast<Type*>($4)); }
    | kLPAREN params kRPAREN kARROW type
    {
      TypeProc* sig = new TypeProc(driver.loc(@1, @5), static_cast<Type*>($5));
      for (auto &node : $2->nodes) {
        sig->params.emplace_back(static_cast<Param*>(node));
      }
      $$ = sig;
    }
    | kARROW simple_type
    { $$ = new TypeProc(driver.loc(@1, @2), static_cast<Type*>($2)); }

  params
    : required_positional kCOMMA params
    { $$ = driver.merge($1, $3); }
    | required_positional
    { $$ = driver.list($1); }
    | optional_positionals

  required_positional
    : type var_name_opt
    { $$ = new Param(driver.loc(@1, @2), $2, static_cast<Type*>($1), false, false, false); }

  optional_positionals
    : optional_positional kCOMMA optional_positionals
    { $$ = driver.merge($1, $3); }
    | optional_positional
    { $$ = driver.list($1); }
    | rest_positionals

  optional_positional
    : kQUESTION type var_name_opt
    { $$ = new Param(driver.loc(@1, @3), $3, static_cast<Type*>($2), false, true, false); }

  rest_positionals
    : rest_positional kCOMMA rest_positionals
    { $$ = driver.merge($1, $3); }
    | rest_positional
    { $$ = driver.list($1); }
    | keywords

  rest_positional
    : kSTAR type var_name_opt
    { $$ = new Param(driver.loc(@1, @3), $3, static_cast<Type*>($2), false, false, true); }

  keywords
    : %empty
    { $$ = driver.list(); }
    | required_keyword kCOMMA keywords
    { $$ = driver.merge($1, $3); }
    | required_keyword
    { $$ = driver.list($1); }
    | optional_keyword kCOMMA keywords
    { $$ = driver.merge($1, $3); }
    | optional_keyword
    { $$ = driver.list($1); }
    | rest_keyword
    { $$ = driver.list($1); }

  required_keyword
    : keyword_name type var_name_opt
    { $$ = new Param(driver.loc(@1, @2), $1, static_cast<Type*>($2), true, false, false); }

  optional_keyword
    : kQUESTION keyword_name type var_name_opt
    { $$ = new Param(driver.loc(@1, @3), $2, static_cast<Type*>($3), true, false, false); }

  rest_keyword
    : kSTAR2 type var_name_opt
    { $$ = new Param(driver.loc(@1, @3), $3, static_cast<Type*>($2), false, false, true); }

  var_name_opt
    : %empty
    { $$ = NULL; }
    | tLIDENT
    | tINTERFACEIDENT
    | tQUOTEDMETHOD

  keyword_name
    : keyword
    | identifier_keywords kCOLON

  keyword
    : tUKEYWORD
    { $1->pop_back(); }
    | tLKEYWORD
    { $1->pop_back(); }

  // Types

  type
    : simple_type
    | type kBAR type
    {
      std::vector<Type*> types;
      if(TypeUnion* u = dynamic_cast<TypeUnion*>($1)) {
        for (auto &type : u->types) {
          types.emplace_back(type);
        }
      } else {
        types.emplace_back(static_cast<Type*>($1));
      }
      types.emplace_back(static_cast<Type*>($3));
      $$ = new TypeUnion(driver.loc(@1, @3), types);
    }
    | type kAMP type
    {
      std::vector<Type*> types;
      if(TypeIntersection* u = dynamic_cast<TypeIntersection*>($1)) {
        for (auto &type : u->types) {
          types.emplace_back(type);
        }
      } else {
        types.emplace_back(static_cast<Type*>($1));
      }
      types.emplace_back(static_cast<Type*>($3));
      $$ = new TypeIntersection(driver.loc(@1, @3), types);
    }

  simple_type
    : kBOOL
    { $$ = new TypeBool(driver.loc(@1, @1)); }
    | kTRUE
    { $$ = new TypeTrue(driver.loc(@1, @1)); }
    | kFALSE
    { $$ = new TypeFalse(driver.loc(@1, @1)); }
    | kNIL
    { $$ = new TypeNil(driver.loc(@1, @1)); }
    | kSELF
    { $$ = new TypeSelf(driver.loc(@1, @1)); }
    | kSELFQ
    { $$ = new TypeSelfQ(driver.loc(@1, @1)); }
    | kVOID
    { $$ = new TypeVoid(driver.loc(@1, @1)); }
    | kUNTYPED
    { $$ = new TypeUntyped(driver.loc(@1, @1)); }
    | tSTRING
    { $$ = new TypeString(driver.loc(@1, @1), $1); }
    | kTOP
    { $$ = new TypeTop(driver.loc(@1, @1)); }
    | kBOT
    { $$ = new TypeBot(driver.loc(@1, @1)); }
    | kINSTANCE
    { $$ = new TypeInstance(driver.loc(@1, @1)); }
    | kANY
    { $$ = new TypeAny(driver.loc(@1, @1)); }
    | kCLASS
    { $$ = new TypeClass(driver.loc(@1, @1)); }
    | tINTEGER
    { $$ = new TypeInteger(driver.loc(@1, @1), $1); }
    | tSYMBOL
    { $$ = new TypeSymbol(driver.loc(@1, @1), $1); }
    | qualified_name
    { $$ = new TypeSimple(driver.loc(@1, @1), $1); }
    | qualified_name kLBRACKET type_list kRBRACKET
    {
      TypeGeneric* type = new TypeGeneric(driver.loc(@1, @4), $1);
      for (auto &ptype : $3->nodes) {
        type->types.emplace_back(static_cast<Type*>(ptype));
      }
      $$ = type;
    }
    | kLBRACKET type_list kRBRACKET
    {
      TypeTuple* tuple = new TypeTuple(driver.loc(@1, @3));
      for (auto &type : $2->nodes) {
        tuple->types.emplace_back(static_cast<Type*>(type));
      }
      $$ = tuple;
    }
    | kLBRACKET kRBRACKET
    { $$ = new TypeTuple(driver.loc(@1, @1)); }
    | kLPAREN type kRPAREN
    { $$ = $2; }
    | kSINGLETON kLPAREN class_name kRPAREN
    { $$ = new TypeSingleton(driver.loc(@1, @4), $3); }
    | simple_type kQUESTION
    { $$ = new TypeNilable(driver.loc(@1, @2), static_cast<Type*>($1)); }
    | kHAT proc_type
    { $$ = new Block(driver.loc(@1, @2), static_cast<TypeProc*>($2), false); }
    | record_type

  type_list
    : type
    { $$ = driver.list($1); }
    | type_list kCOMMA type
    { $$ = driver.merge($1, $3); }

  proc_type
    : kLPAREN kRPAREN kARROW simple_type
    { $$ = new TypeProc(driver.loc(@1, @4), static_cast<Type*>($4)); }
    | kLPAREN params kRPAREN kARROW simple_type
    {
      TypeProc* sig = new TypeProc(driver.loc(@1, @5), static_cast<Type*>($5));
      for (auto &node : $2->nodes) {
        sig->params.emplace_back(static_cast<Param*>(node));
      }
      $$ = sig;
    }
    | kARROW simple_type
    { $$ = new TypeProc(driver.loc(@1, @2), static_cast<Type*>($2)); }

  record_type
    : kLBRACE record_fields kRBRACE
    {
      Record* record = new Record(driver.loc(@1, @3));
      for (auto &node : $2->nodes) {
        record->fields.emplace_back(static_cast<RecordField*>(node));
      }
      $$ = record;
    }

  record_fields
    : record_field
    { $$ = driver.list($1); }
    | record_field kCOMMA record_fields
    { $$ = driver.merge($1, $3); }

  record_field
    : tSYMBOL kFATARROW type
    { $$ = new RecordField(driver.loc(@1, @3), $1, static_cast<Type*>($3)); }
    | tSTRING kFATARROW type
    { $$ = new RecordField(driver.loc(@1, @3), $1, static_cast<Type*>($3)); }
    | tINTEGER kFATARROW type
    { $$ = new RecordField(driver.loc(@1, @3), $1, static_cast<Type*>($3)); }
    | keyword type
    { $$ = new RecordField(driver.loc(@1, @2), $1, static_cast<Type*>($2)); }

  // Names

  namespace
    : %empty
    { $$ = new std::string(""); }
    | kCOLON2 tNAMESPACE
    { $$ = new std::string(*$1 + *$2); }
    | tNAMESPACE
    | kCOLON2

  qualified_name
    : namespace simple_name
    { $$ = new std::string(*$1 + *$2); }

  simple_name
    : tUIDENT
    | tLIDENT
    | tINTERFACEIDENT
%%

void rbs_parser::Parser::error(const location_type& loc, const std::string& m) {
  std::stringstream what;
  what << loc.begin.line << ":" << std::to_string(loc.begin.column) << "-";
  what << loc.end.line << ":" << std::to_string(loc.end.column) << ": ";
  what << m;
  throw rbs_parser::ParseError(what.str());
}
